// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Domain.Master", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("BirthPlace");

                    b.Property<DateTime>("CreateDate");

                    b.Property<DateTime?>("DeathDate");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<string>("Photo");

                    b.HasKey("Id");

                    b.ToTable("Masters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Bio to be submitted later...",
                            BirthDate = new DateTime(1770, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Bonn, Germany",
                            CreateDate = new DateTime(2019, 9, 7, 19, 2, 13, 576, DateTimeKind.Local).AddTicks(1470),
                            DeathDate = new DateTime(1827, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Ludwig Van",
                            IsActive = true,
                            LastName = "Beethoven",
                            Photo = "/images/beethoven.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Bio to be submitted later...",
                            BirthDate = new DateTime(1756, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Salzburg, Austria",
                            CreateDate = new DateTime(2019, 9, 7, 19, 2, 13, 587, DateTimeKind.Local).AddTicks(4140),
                            DeathDate = new DateTime(1791, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Wolfgang Amadeus",
                            IsActive = true,
                            LastName = "Mozart",
                            Photo = "/images/mozart.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Bio to be submitted later...",
                            BirthDate = new DateTime(1810, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Żelazowa Wola, Poland",
                            CreateDate = new DateTime(2019, 9, 7, 19, 2, 13, 587, DateTimeKind.Local).AddTicks(4160),
                            DeathDate = new DateTime(1849, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Frédéric",
                            IsActive = true,
                            LastName = "Chopin",
                            Photo = "/images/chopin.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Bio to be submitted later...",
                            BirthDate = new DateTime(1862, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Saint-Germain-en-Laye, France",
                            CreateDate = new DateTime(2019, 9, 7, 19, 2, 13, 587, DateTimeKind.Local).AddTicks(4170),
                            DeathDate = new DateTime(1918, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Claude",
                            IsActive = true,
                            LastName = "Debussy",
                            Photo = "/images/debussy.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Bio to be submitted later...",
                            BirthDate = new DateTime(1811, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Raiding, Austria",
                            CreateDate = new DateTime(2019, 9, 7, 19, 2, 13, 587, DateTimeKind.Local).AddTicks(4180),
                            DeathDate = new DateTime(1886, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Franz",
                            IsActive = true,
                            LastName = "Liszt",
                            Photo = "/images/liszt.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Bio = "Bio to be submitted later...",
                            BirthDate = new DateTime(1873, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = " Novgorod, Russia",
                            CreateDate = new DateTime(2019, 9, 7, 19, 2, 13, 587, DateTimeKind.Local).AddTicks(4180),
                            DeathDate = new DateTime(1943, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sergei",
                            IsActive = true,
                            LastName = "Rachmaninoff",
                            Photo = "/images/rachmaninoff.jpg"
                        },
                        new
                        {
                            Id = 7,
                            Bio = "Bio to be submitted later...",
                            BirthDate = new DateTime(1867, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = " Novgorod, Russia",
                            CreateDate = new DateTime(2019, 9, 7, 19, 2, 13, 587, DateTimeKind.Local).AddTicks(4190),
                            DeathDate = new DateTime(1917, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Scott",
                            IsActive = true,
                            LastName = "Joplin",
                            Photo = "/images/joplin.jpg"
                        });
                });

            modelBuilder.Entity("Domain.Piece", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ComposeDate");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsActive");

                    b.Property<int>("MasterId");

                    b.Property<string>("Name");

                    b.Property<int>("StyleId");

                    b.HasKey("Id");

                    b.ToTable("Pieces");
                });

            modelBuilder.Entity("Domain.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Phone");

                    b.Property<Guid>("ProfileId");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Domain.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Styles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Baroque"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Galant"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Classical"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Romantic"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Impressionism"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Expressionism"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Neoclassicism"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Experimental"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Minimalism"
                        });
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<int>("RoleId");

                    b.Property<string>("UserName");

                    b.Property<DateTime>("createDate");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
